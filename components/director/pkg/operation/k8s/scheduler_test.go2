package k8s

import (
	"context"
	"testing"
	"time"

	"github.com/kyma-incubator/compass/components/director/pkg/async/k8s/automock"
	"github.com/kyma-incubator/compass/components/op-controller/api/v1beta1"
)

func TestScheduler_Schedule(t *testing.T) {
	type fields struct {
		kcli                         K8SClient
		lastProcessedResourceVersion string
		restartTimeout               time.Duration
		paralellism                  int
	}
	type args struct {
		op *v1beta1.Operation
	}
	type testCase struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}
	tests := []testCase{
		{
			name: "when this is the first operation for resource",
			fields: fields{
				kcli:                         &automock.K8SClient{},
				lastProcessedResourceVersion: "",
				restartTimeout:               time.Second,
				paralellism:                  1,
			},
			args: args{},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := NewScheduler(tt.fields.kcli, tt.fields.restartTimeout, tt.fields.paralellism)
			if err := s.Schedule(context.TODO(), tt.args.op); (err != nil) != tt.wantErr {
				t.Errorf("Scheduler.Schedule() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}
